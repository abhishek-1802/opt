clear all
clc
A = [1 3;1 1];
m = 2;
nv = 2;
sign = [-1 -1];
b = [3;2];
c = [-3 -5];
S = eye(m);
cnew = c;
nart = 0;
c_ph1 = zeros(1,nv+m);
index_bv = [];
index_art = [];
for i = 1:m
    dummy = zeros(m,1);
    if sign(i) < 0
        S(i,i) = -S(i,i);
        nart = nart + 1
        dummy(i) = 1;
        S = [S dummy]; 
        cnew(nv + i) = 0
    else if sign(i) == 0
        S(i,i) = 1;
        cnew(nv + i) = -1
    else if sign(i) > 0
        cnew(nv + i) = 0
    end
    end
    end
end
Anew = [A S];
n = length(Anew);
nart = 0;
nart_1 = 0;
for i = 1:m
    index_bv(i) = nv + i;
    if sign(i) < 0
        nart = nart + 1;
        index_bv(i) = nv + m + nart;
        index_art = [index_art nv+m+nart]
        cnew(nv + m + nart) = -1;
        c_ph1 = [c_ph1 -1];
    else if sign(i) == 0
        nart_1 = nart_1 + 1;
        index_art = [index_art nv+i];
        c_ph1(nv + i) = -1;
    end
    end
end
cb = c_ph1(index_bv);
nart = nart + nart_1; 
Afinal = Anew;
index = index_bv;
X=zeros(n,1); 
B=[];
for j=1:m
    B=[B Afinal(:,index(j))];
end
tolerance=10^(-7);
if abs(det(B))< tolerance
    disp('change the basis matrix')
else
    Y=inv(B)*b; 
    X(index)=Y; 
end

c= c_ph1;
A= Afinal;
for s=1:100 % number of iterations
    B=[];
    for j=1:m
        B=[ B A(:,index(j))]; % computing basis matrix
    end
    tolerance=10^-7;
    if abs(det(B))<tolerance
        disp('change basis matrix');
    end
    cb=c(index); 
    Xb=inv(B)*b; 
    X(index) = Xb
%     if nnz(Xb)< m % checking degeneracy
%         disp('degenerate bfs')
%     end
    z=cb*Xb; %computing objective function value
    Y=inv(B)*A; % computing column vectors of all variables
    NE=cb*Y-c; % computing net evaluations
%optimality check
    if NE>=0 % for max problem, sign will be changed for min problem
        disp('optimality declared');
        break;
    X=zeros(n,1); % initializing solution with zero values
    X(index)=Xb % placing the values of basic variables in original vector
%X
    else
    [a,EV]= min(NE);
%choose leaving variable
    for j=1:m
        if Y(j,EV)>0
        ratio(j)=Xb(j)/Y(j,EV); % selecting only positive pivots
        else
        ratio(j)= 10^8;
        end
    end
    if min(ratio)==10^8
        disp('Lpp is unbounded')
    else
        [k,LV]=min(ratio);
        index(LV)=EV;
    end
    end
end
%%%%%%%%%Check if artificial variables are equal to zero%%%%%%%%%%%
if X(index_art) ~= 0
    disp("Solution is infeasible")
    return
end
%%%%%%%%%%%%%%Optimal solution for phase-2%%%%%%%%%%%%%%%

Afinal(:,index_art) = [];
A = Afinal;
c = cnew;
c(:,index_art) = [];
X=zeros(n,1); % initializing solution with zero values
disp("Calculation of phase-2 begin");
for s=1:100 % number of iterations
    B=[];
    for j=1:m
        B=[ B A(:,index(j))]; % computing basis matrix
    end
    tolerance=10^-7;
    if abs(det(B))<tolerance
        disp('change basis matrix');
    end
    cb=c(index); % cost of basic variables
    Xb=inv(B)*b; % basic solution
    if nnz(Xb)< m % checking degeneracy
        disp('degenerate bfs')
    end
    z=cb*Xb; %computing objective function value
    Y=inv(B)*A; % computing column vectors of all variables
    NE=cb*Y-c; % computing net evaluations
%optimality check
    if NE>=0 % for max problem, sign will be changed for min problem
        disp('optimality declared');
        break;
    else 
    [a,EV]= min(NE);
    for j=1:m
        if Y(j,EV)>0
            ratio(j)=Xb(j)/Y(j,EV); % selecting only positive pivots
        else
            ratio(j)= 10^8;
        end
    end
    if min(ratio)==10^8
        disp('Lpp is unbounded')
    else
        [k,LV]=min(ratio);
        index(LV)=EV;
    end
    end
end