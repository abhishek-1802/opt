clc
clear all
A = [1 4 8 6 ; 4 2 2 1 ; 2 3 1 2]
m = 3
nv = 4
sign = [1 1 1]
b = [11; 7; 2]
c = [4 6 3 1]
S = eye(m) 
for i = 1:m
    if sign(i) < 0
        S(i,i) = -S(i,i);
    else if sign(i) == 0
        S(i,i) = 0;
    end
    end
end
S
Anew = [A S]
n = length(Anew)
Afinal = Anew
index = 0
for i = 1:n
    if Anew(:,i) == 0
        rm = i - index
        Afinal(:,rm) = []
        index = index + 1;
    end
end
%Afinal
n = length(Afinal)
cadd = zeros(1, n - nv)
cnew = [c cadd]
Cnumber=nchoosek(n,m)
D=nchoosek(1:n,m)
fs=[]
Z=[]
ifs=[]
dgfs=[]
for i=1:Cnumber
    index=D(i,:)
    X=zeros(n,1)
    B=[]
    %i
    for j=1:m
        B=[B Afinal(:,index(j))]
    end
    tolerance=10^(-7)
    if abs(det(B))< tolerance
        disp('change the basis matrix') 
    else
        Y=inv(B)*b
        X(index)=Y
        %X
        if X>=0
            break
        end
    end
end
index
cnew
cb = cnew(index)'
mat = [cb Afinal b]

n=length(Afinal)

c= cnew
A= Afinal
for s=1:100
    B=[]
    for j=1:m
        B=[ B A(:,index(j))]
    end
    tolerance=10^-7
    if abs(det(B))<tolerance
        disp('change basis matrix');
    end

    cb=c(index)
    Xb=inv(B)*b
    nnz(Xb)    %non zero elements
    if nnz(Xb)< m
        disp('degenerate bfs')
        %Xb
        %index
    end
    cb
    z=cb*Xb
    Y=inv(B)*A
    NE=cb*Y-c
    if NE>=0
        disp('optimality declared');
        break;
        %Xb
        %index
        %z
    else
        
        [a,EV]= min(NE)
    for j=1:m
        if Y(j,EV)>0
            ratio(j)=Xb(j)/Y(j,EV)
        else
            ratio(j)= 10^8
        end
    end
   
    if min(ratio)==10^8
        disp('Lpp is unbounded')
    else
        [k,LV]=min(ratio)
        index(LV)=EV
    end
    end
end